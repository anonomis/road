// Generated by CoffeeScript 1.6.2
(function() {
  var hotkeys, r, registerHotkey, req, root;

  root = this;

  req = {
    0: ['geometry', 'paper', 'tools', 'entities'],
    1: ['raphael'],
    2: ['layers']
  };

  r = requirejs;

  r(req[0], function() {
    return r(req[1], function() {
      return r(req[2], function() {
        var curve, handle, node;

        $("#nodeSnap").click(function(e) {
          var _base;

          return typeof (_base = tools.current).click === "function" ? _base.click(e) : void 0;
        });
        $("#nodeSnap").mousemove(function(e) {
          var _base;

          return typeof (_base = tools.current).move === "function" ? _base.move(e) : void 0;
        });
        $(window).keypress(function(e) {
          var _base;

          return typeof (_base = tools.current).keyDown === "function" ? _base.keyDown(e) : void 0;
        });
        node = new ents.Node(P(100, 80));
        handle = new ents.Handle(node, P(150, 85));
        curve = C({
          p0: P(100, 80),
          p1: P(150, 85),
          p2: P(200, 200),
          p3: P(210, 210)
        });
        ents.makeRoad(handle, curve);
        return new tools.CommonTool();
      });
    });
  });

  hotkeys = {};

  $(window).keypress(function(e) {
    var _name;

    console.log(e.which);
    return typeof hotkeys[_name = event.which] === "function" ? hotkeys[_name]() : void 0;
  });

  registerHotkey = function(key, func) {
    return hotkeys[key] = func;
  };

  registerHotkey(113, function() {
    return new tools.CommonTool();
  });

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
