// Generated by CoffeeScript 1.6.2
(function() {
  var ArcTool, Bezier, BezierTool, Edge, LineTool, NodeTool, findNode, hotkeys, r, registerHotkey, req, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = this;

  req = {
    0: ['./node_modules/straightcurve/lib/arc2', './node_modules/straightcurve/lib/vector2', './node_modules/straightcurve/lib/vertex2', './node_modules/straightcurve/lib/line2', './node_modules/straightcurve/lib/circle2', './node_modules/straightcurve/lib/line2', 'tools', 'entities'],
    1: ['./node_modules/straightcurve/lib/distancer', 'raphael'],
    2: ['layers']
  };

  r = requirejs;

  r(req[0], function() {
    return r(req[1], function() {
      return r(req[2], function() {
        var height, j, width;

        j = $;
        width = $('body').width();
        height = $('body').height();
        j("#nodeSnap").click(function(e) {
          var _base;

          return typeof (_base = tools.current).click === "function" ? _base.click(e) : void 0;
        });
        j("#nodeSnap").mousemove(function(e) {
          var _base;

          return typeof (_base = tools.current).move === "function" ? _base.move(e) : void 0;
        });
        new ents.Node(P(100, 80), P(100, 10));
        return new ents.Node(P(151, 194), P(115, 198));
      });
    });
  });

  hotkeys = {};

  $(window).keypress(function(e) {
    var _name;

    console.log(e.which);
    return typeof hotkeys[_name = event.which] === "function" ? hotkeys[_name]() : void 0;
  });

  registerHotkey = function(key, func) {
    return hotkeys[key] = func;
  };

  registerHotkey(49, function() {
    return window.currentTool = new NodeTool();
  });

  registerHotkey(50, function() {
    return window.currentTool = new BezierTool();
  });

  registerHotkey(113, function() {
    return window.currentTool = new NodeTool();
  });

  window.ctrlHold = false;

  $(window).keydown(function(e) {
    var _base;

    console.log("down", e.which);
    return typeof (_base = tools.current).keyDown === "function" ? _base.keyDown(e) : void 0;
  });

  $(window).keyup(function(e) {
    var _base;

    console.log("up", e.which);
    return typeof (_base = tools.current).keyUp === "function" ? _base.keyUp(e) : void 0;
  });

  $(window).blur(function(e) {
    return window.ctrlHold = false;
  });

  LineTool = (function() {
    function LineTool() {
      this.mousemove = __bind(this.mousemove, this);
      this.click = __bind(this.click, this);      this.p1 = null;
      this.p2 = null;
      this.step = 0;
    }

    LineTool.prototype.click = function(e) {
      var _ref;

      if ((_ref = this.clickSteps[this.step]) != null) {
        _ref.call(this, e);
      }
      return this.step++;
    };

    LineTool.prototype.clickSteps = {
      0: function(e) {
        return this.p1 = P(e);
      },
      1: function(e) {
        return this.p2 = P(e);
      },
      2: function(e) {
        layers.main.drawLine(L(this.p1, this.p2));
        return window.currentTool = new LineTool();
      }
    };

    LineTool.prototype.mousemove = function(e) {
      var _ref;

      return (_ref = this.mousemoveSteps[this.step]) != null ? _ref.call(this, e) : void 0;
    };

    LineTool.prototype.mousemoveSteps = {
      0: function(e) {},
      1: function(e) {
        layers.tool.clear();
        if (this.p1 != null) {
          return layers.tool.drawLine(L(this.p1, P(e)));
        }
      },
      2: function(e) {}
    };

    return LineTool;

  })();

  findNode = function(e) {
    var foundNode, node, p, x, y, _i, _j, _ref, _ref1, _ref2, _ref3;

    p = P(e);
    node = null;
    foundNode = false;
    for (x = _i = _ref = p.x - 5, _ref1 = p.x + 5; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; x = _ref <= _ref1 ? ++_i : --_i) {
      if (nodes[x] != null) {
        for (y = _j = _ref2 = p.y - 5, _ref3 = p.y + 5; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; y = _ref2 <= _ref3 ? ++_j : --_j) {
          node = nodes[x][y];
          if (node != null) {
            foundNode = true;
            break;
          }
        }
      }
      if (foundNode) {
        break;
      }
    }
    return node;
  };

  NodeTool = (function() {
    function NodeTool() {
      this.mousemove = __bind(this.mousemove, this);
      this.click = __bind(this.click, this);      this.p0 = null;
      this.p1 = null;
      this.step = 0;
    }

    NodeTool.prototype.click = function(e) {
      var _ref;

      return (_ref = this.clickSteps[this.step]) != null ? _ref.call(this, e) : void 0;
    };

    NodeTool.prototype.clickSteps = {
      0: function(e) {
        if (this.node != null) {
          return window.currentTool = new BezierTool(this.node);
        } else {
          this.p0 = P(e);
          return this.step++;
        }
      },
      1: function(e) {
        new Edge(this.p0, P(e));
        return window.currentTool = new NodeTool();
      }
    };

    NodeTool.prototype.mousemove = function(e) {
      var _ref;

      return (_ref = this.mousemoveSteps[this.step]) != null ? _ref.call(this, e) : void 0;
    };

    NodeTool.prototype.mousemoveSteps = {
      0: function(e) {
        layers.tool.clear();
        this.node = findNode(e);
        if (this.node != null) {
          return layers.tool.drawNode(this.node, true);
        } else {
          return layers.tool.drawImpasse(P(e));
        }
      },
      1: function(e) {
        var line;

        line = L(this.p0, P(e));
        layers.tool.clear();
        layers.tool.drawRoad(line);
        return layers.tool.drawImpasse(this.p0);
      }
    };

    return NodeTool;

  })();

  Edge = (function() {
    function Edge(p0, p1) {
      this.p0 = p0;
      this.p1 = p1;
      this.n0 = new Node(this.p0, this.p1);
      this.n1 = new Node(this.p1, this.p0);
      this.line = L(this.p0, this.p1);
      this.draw();
    }

    Edge.prototype.draw = function() {
      layers.main.drawRoad(this.line);
      return layers.main.drawImpasse(this.p0);
    };

    return Edge;

  })();

  ArcTool = (function() {
    function ArcTool() {
      this.mousemove = __bind(this.mousemove, this);
      this.click = __bind(this.click, this);      this.p1 = null;
      this.p2 = null;
      this.step = 0;
    }

    ArcTool.prototype.click = function(e) {
      var _ref;

      if ((_ref = this.clickSteps[this.step]) != null) {
        _ref.call(this, e);
      }
      return this.step++;
    };

    ArcTool.prototype.clickSteps = {
      0: function(e) {
        return this.p1 = P(e);
      },
      1: function(e) {
        return this.p2 = P(e);
      },
      2: function(e) {
        layers.main.drawArc(new Arc2(this.p1, P(e), this.p2));
        return window.currentTool = new ArcTool();
      }
    };

    ArcTool.prototype.mousemove = function(e) {
      var _ref;

      return (_ref = this.mousemoveSteps[this.step]) != null ? _ref.call(this, e) : void 0;
    };

    ArcTool.prototype.mousemoveSteps = {
      0: function(e) {},
      1: function(e) {},
      2: function(e) {
        layers.tool.clear();
        return layers.tool.drawArc(new Arc2(this.p1, P(e), this.p2));
      }
    };

    return ArcTool;

  })();

  BezierTool = (function() {
    function BezierTool(node) {
      this.node = node != null ? node : null;
      this.mousemove = __bind(this.mousemove, this);
      this.click = __bind(this.click, this);
      this.p1 = null;
      this.p2 = null;
      this.p3 = null;
      this.p4 = null;
      if (this.node == null) {
        this.step = 0;
      } else {
        this.step = 1;
      }
    }

    BezierTool.prototype.click = function(e) {
      var _ref;

      return (_ref = this.clickSteps[this.step]) != null ? _ref.call(this, e) : void 0;
    };

    BezierTool.prototype.clickSteps = {
      0: function(e) {
        if (this.node != null) {
          return this.step++;
        }
      },
      1: function(e) {
        var bezier, line, node;

        if (ctrlHold) {
          line = straightLineFromNode(this.node, P(e));
          layers.main.drawLine(line);
          node = new Node(line.p1, line.p0);
          window.currentTool = new BezierTool(node);
          return;
        }
        bezier = this.bezier(e);
        layers.main.drawBeizer(bezier);
        node = new Node(bezier.p3, bezier.p2);
        return window.currentTool = new BezierTool(node);
      },
      2: function(e) {
        this.p2 = P(e);
        return this.step++;
      },
      3: function(e) {
        return layers.main.drawBeizer({
          p0: this.p0,
          p1: P(e),
          p2: this.p2,
          p3: this.p1
        });
      }
    };

    BezierTool.prototype.mousemove = function(e) {
      var _ref;

      return (_ref = this.mousemoveSteps[this.step]) != null ? _ref.call(this, e) : void 0;
    };

    BezierTool.prototype.findNode = function(e) {
      var foundNode, node, p, x, y, _i, _j, _ref, _ref1, _ref2, _ref3;

      p = P(e);
      node = null;
      foundNode = false;
      for (x = _i = _ref = p.x - 5, _ref1 = p.x + 5; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; x = _ref <= _ref1 ? ++_i : --_i) {
        if (nodes[x] != null) {
          for (y = _j = _ref2 = p.y - 5, _ref3 = p.y + 5; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; y = _ref2 <= _ref3 ? ++_j : --_j) {
            node = nodes[x][y];
            if (node != null) {
              node.highLight();
              foundNode = true;
              break;
            }
          }
        }
        if (foundNode) {
          break;
        }
      }
      return node;
    };

    BezierTool.prototype.bezier = function(e) {
      var end, etarg, mid, sta, starg;

      sta = this.node.pos;
      end = P(e);
      mid = this.node.line.growAdd(100).p1;
      starg = this.node.ctrl;
      etarg = P(end.x + ((mid.x - end.x) / 2), end.y + ((mid.y - end.y) / 2));
      layers.tool.drawDot(starg, "#0F0");
      layers.tool.drawDot(mid);
      layers.tool.drawDot(etarg, "#F0F");
      return {
        p0: sta,
        p1: starg,
        p2: etarg,
        p3: end
      };
    };

    BezierTool.prototype.mousemoveSteps = {
      0: function(e) {
        var foundNode, p, x, y, _i, _j, _ref, _ref1, _ref2, _ref3;

        p = P(e);
        foundNode = false;
        for (x = _i = _ref = p.x - 5, _ref1 = p.x + 5; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; x = _ref <= _ref1 ? ++_i : --_i) {
          if (nodes[x] != null) {
            for (y = _j = _ref2 = p.y - 5, _ref3 = p.y + 5; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; y = _ref2 <= _ref3 ? ++_j : --_j) {
              this.node = nodes[x][y];
              if (this.node != null) {
                this.node.highLight();
                foundNode = true;
                break;
              }
            }
          }
          if (foundNode) {
            break;
          }
        }
        if (!foundNode) {
          layers.tool.clear();
          return this.node = null;
        }
      },
      1: function(e) {
        var line;

        layers.tool.clear();
        if (ctrlHold) {
          line = straightLineFromNode(this.node, P(e));
          layers.tool.drawLine(line);
          return;
        }
        layers.tool.drawNode(this.node, true);
        return layers.tool.drawBeizer(this.bezier(e));
      },
      2: function(e) {
        layers.tool.clear();
        return layers.tool.drawArc(new Arc2(this.p0, P(e), this.p1));
      },
      3: function(e) {
        var currentTool;

        layers.tool.clear();
        layers.tool.drawBeizer({
          p0: this.pos,
          p1: P(e),
          p2: this.p2,
          p3: this.p1
        });
        return currentTool = new BezierTool();
      }
    };

    return BezierTool;

  })();

  root.nodes = [];

  Bezier = (function() {
    function Bezier(start, end, controlpoints) {
      this.start = start;
      this.end = end;
      this.controlpoints = controlpoints != null ? controlpoints : [];
      this.cordinateArray = _.flatten([this.start, this.controllpoints, this.end]);
    }

    return Bezier;

  })();

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
