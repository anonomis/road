// Generated by CoffeeScript 1.6.2
(function() {
  var ArcTool, Bezier, BezierTool, Layer, LineTool, Node, NodeTool, Road, RoadTool, hotkeys, registerHotkey, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = this;

  requirejs(['./node_modules/straightcurve/lib/arc2', './node_modules/straightcurve/lib/vector2', './node_modules/straightcurve/lib/vertex2', './node_modules/straightcurve/lib/line2', './node_modules/straightcurve/lib/circle2', './node_modules/straightcurve/lib/line2'], function() {
    return requirejs(['./node_modules/straightcurve/lib/distancer'], function() {
      var height, j, width;

      j = $;
      root.layers = {
        main: new Layer('main'),
        tool: new Layer('tool')
      };
      width = $('body').width();
      height = $('body').height();
      j("body").append($('<div id="mouseTrap" style="border:1px solid #aaa; background-color:rgba(0,0,0,0);    position: absolute; left: 0; top: 0; bottom: 0; z-index: 2;      width: ' + width + '; height: ' + height + ';"></div>'));
      j("#mouseTrap").click(function(e) {
        return typeof currentTool.click === "function" ? currentTool.click(e) : void 0;
      });
      j("#mouseTrap").mousemove(function(e) {
        return typeof currentTool.mousemove === "function" ? currentTool.mousemove(e) : void 0;
      });
      j("#mouseTrap").mousedown(function(e) {
        return typeof currentTool.mousedown === "function" ? currentTool.mousedown(e) : void 0;
      });
      return window.currentTool = new RoadTool();
    });
  });

  hotkeys = {};

  $(window).keypress(function(e) {
    var _name;

    console.log(e.which);
    return typeof hotkeys[_name = event.which] === "function" ? hotkeys[_name]() : void 0;
  });

  registerHotkey = function(key, func) {
    return hotkeys[key] = func;
  };

  registerHotkey(49, function() {
    return window.currentTool = new NodeTool();
  });

  registerHotkey(50, function() {
    return window.currentTool = new BezierTool();
  });

  window.ctrlHold = false;

  $(window).keydown(function(e) {
    if (e.which === 17) {
      return window.ctrlHold = true;
    }
  });

  $(window).keyup(function(e) {
    if (e.which === 17) {
      return window.ctrlHold = false;
    }
  });

  $(window).blur(function(e) {
    return window.ctrlHold = false;
  });

  LineTool = (function() {
    function LineTool() {
      this.mousemove = __bind(this.mousemove, this);
      this.click = __bind(this.click, this);      this.p1 = null;
      this.p2 = null;
      this.step = 0;
    }

    LineTool.prototype.click = function(e) {
      var _ref;

      if ((_ref = this.clickSteps[this.step]) != null) {
        _ref.call(this, e);
      }
      return this.step++;
    };

    LineTool.prototype.clickSteps = {
      0: function(e) {
        return this.p1 = P(e);
      },
      1: function(e) {
        return this.p2 = P(e);
      },
      2: function(e) {
        layers.main.drawLine(L(this.p1, this.p2));
        return window.currentTool = new LineTool();
      }
    };

    LineTool.prototype.mousemove = function(e) {
      var _ref;

      return (_ref = this.mousemoveSteps[this.step]) != null ? _ref.call(this, e) : void 0;
    };

    LineTool.prototype.mousemoveSteps = {
      0: function(e) {},
      1: function(e) {
        layers.tool.clear();
        if (this.p1 != null) {
          return layers.tool.drawLine(L(this.p1, P(e)));
        }
      },
      2: function(e) {}
    };

    return LineTool;

  })();

  RoadTool = (function() {
    function RoadTool() {
      this.mousemove = __bind(this.mousemove, this);
      this.mousedown = __bind(this.mousedown, this);
      this.click = __bind(this.click, this);      this.road = new Road();
      this.step = 0;
      this.mousePressed = false;
    }

    RoadTool.prototype.click = function(e) {};

    RoadTool.prototype.clickSteps = {
      0: function(e) {},
      1: function(e) {},
      2: function(e) {}
    };

    RoadTool.prototype.mousedown = function(e) {
      return this.mousePressed = true;
    };

    RoadTool.prototype.mousemove = function(e) {
      var _ref;

      return (_ref = this.mousemoveSteps[this.step]) != null ? _ref.call(this, e) : void 0;
    };

    RoadTool.prototype.mousemoveSteps = {
      0: function(e) {
        if (this.mousePressed) {
          this.road.turnTo(V(e));
        } else {
          this.road.setCenter(P(e));
        }
        layers.tool.clear();
        return this.road.draw(layers.tool.ctx);
      },
      1: function(e) {},
      2: function(e) {}
    };

    return RoadTool;

  })();

  Road = (function() {
    function Road() {
      this.center = new Vector2(0, 0);
    }

    Road.prototype.setCenter = function(pnt) {
      return this.center = new Vector2(pnt.x, pnt.y);
    };

    Road.prototype.turnTo = function(v) {
      this.ang = this.center.signedAngle(v);
      return console.log("ang", this.ang);
    };

    Road.prototype.draw = function(ctx) {
      if (this.ang != null) {
        ctx.rotate(this.ang);
      }
      ctx.fillStyle = "gray";
      ctx.fillRect(this.center.x - 4, this.center.y - 16, 8, 32);
      ctx.fillStyle = "black";
      ctx.rotate(0);
      return ctx.translate(0, 0);
    };

    return Road;

  })();

  NodeTool = (function() {
    function NodeTool() {
      this.mousemove = __bind(this.mousemove, this);
      this.click = __bind(this.click, this);      this.p0 = null;
      this.p1 = null;
      this.step = 0;
    }

    NodeTool.prototype.click = function(e) {
      var _ref;

      if ((_ref = this.clickSteps[this.step]) != null) {
        _ref.call(this, e);
      }
      return this.step++;
    };

    NodeTool.prototype.clickSteps = {
      0: function(e) {
        return this.p0 = P(e);
      },
      1: function(e) {
        return this.p1 = P(e);
      },
      2: function(e) {
        new Node(this.p0, this.p1, P(e));
        return window.currentTool = new NodeTool();
      }
    };

    NodeTool.prototype.mousemove = function(e) {
      var _ref;

      return (_ref = this.mousemoveSteps[this.step]) != null ? _ref.call(this, e) : void 0;
    };

    NodeTool.prototype.mousemoveSteps = {
      0: function(e) {},
      1: function(e) {
        var line;

        layers.tool.clear();
        line = L(this.p0, P(e));
        return layers.tool.drawLine(line);
      },
      2: function(e) {
        var line, perp;

        layers.tool.clear();
        line = L(this.p0, this.p1);
        perp = line.perp();
        layers.tool.drawLine(line);
        return layers.tool.drawLine(perp.grow(perp.p0.distance(P(e))));
      }
    };

    return NodeTool;

  })();

  ArcTool = (function() {
    function ArcTool() {
      this.mousemove = __bind(this.mousemove, this);
      this.click = __bind(this.click, this);      this.p1 = null;
      this.p2 = null;
      this.step = 0;
    }

    ArcTool.prototype.click = function(e) {
      var _ref;

      if ((_ref = this.clickSteps[this.step]) != null) {
        _ref.call(this, e);
      }
      return this.step++;
    };

    ArcTool.prototype.clickSteps = {
      0: function(e) {
        return this.p1 = P(e);
      },
      1: function(e) {
        return this.p2 = P(e);
      },
      2: function(e) {
        layers.main.drawArc(new Arc2(this.p1, P(e), this.p2));
        return window.currentTool = new ArcTool();
      }
    };

    ArcTool.prototype.mousemove = function(e) {
      var _ref;

      return (_ref = this.mousemoveSteps[this.step]) != null ? _ref.call(this, e) : void 0;
    };

    ArcTool.prototype.mousemoveSteps = {
      0: function(e) {},
      1: function(e) {},
      2: function(e) {
        layers.tool.clear();
        return layers.tool.drawArc(new Arc2(this.p1, P(e), this.p2));
      }
    };

    return ArcTool;

  })();

  BezierTool = (function() {
    function BezierTool() {
      this.mousemove = __bind(this.mousemove, this);
      this.click = __bind(this.click, this);      this.node = null;
      this.p1 = null;
      this.p2 = null;
      this.p3 = null;
      this.p4 = null;
      this.step = 0;
    }

    BezierTool.prototype.click = function(e) {
      var _ref;

      return (_ref = this.clickSteps[this.step]) != null ? _ref.call(this, e) : void 0;
    };

    BezierTool.prototype.clickSteps = {
      0: function(e) {
        if (this.node != null) {
          this.step++;
        }
        return console.log(this.node);
      },
      1: function(e) {},
      2: function(e) {
        this.p2 = P(e);
        return this.step++;
      },
      3: function(e) {
        return layers.main.drawBeizer({
          p0: this.p0,
          p1: P(e),
          p2: this.p2,
          p3: this.p1
        });
      }
    };

    BezierTool.prototype.mousemove = function(e) {
      var _ref;

      return (_ref = this.mousemoveSteps[this.step]) != null ? _ref.call(this, e) : void 0;
    };

    BezierTool.prototype.findNode = function(e) {
      var foundNode, node, p, x, y, _i, _j, _ref, _ref1, _ref2, _ref3;

      p = P(e);
      node = null;
      foundNode = false;
      for (x = _i = _ref = p.x - 5, _ref1 = p.x + 5; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; x = _ref <= _ref1 ? ++_i : --_i) {
        if (nodes[x] != null) {
          for (y = _j = _ref2 = p.y - 5, _ref3 = p.y + 5; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; y = _ref2 <= _ref3 ? ++_j : --_j) {
            node = nodes[x][y];
            if (node != null) {
              node.highLight();
              foundNode = true;
              break;
            }
          }
        }
        if (foundNode) {
          break;
        }
      }
      return node;
    };

    BezierTool.prototype.mousemoveSteps = {
      0: function(e) {
        var foundNode, p, x, y, _i, _j, _ref, _ref1, _ref2, _ref3;

        p = P(e);
        foundNode = false;
        for (x = _i = _ref = p.x - 5, _ref1 = p.x + 5; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; x = _ref <= _ref1 ? ++_i : --_i) {
          if (nodes[x] != null) {
            for (y = _j = _ref2 = p.y - 5, _ref3 = p.y + 5; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; y = _ref2 <= _ref3 ? ++_j : --_j) {
              this.node = nodes[x][y];
              if (this.node != null) {
                this.node.highLight();
                foundNode = true;
                break;
              }
            }
          }
          if (foundNode) {
            break;
          }
        }
        if (!foundNode) {
          layers.tool.clear();
          return this.node = null;
        }
      },
      1: function(e) {
        var node;

        if (ctrlHold) {
          node = this.findNode(e);
          if (node != null) {
            this.node2 = node;
            layers.tool.clear();
            this.node.highLight();
            this.node2.highLight();
            layers.tool.drawBeizer({
              p0: this.node.perp.p0,
              p1: this.node.perp.p1,
              p2: this.node2.perp.p1,
              p3: this.node2.perp.p0
            });
            return;
          }
        }
        layers.tool.clear();
        this.node.highLight();
        layers.tool.drawBeizer({
          p0: this.node.perp.p0,
          p1: this.node.perp.p1,
          p2: this.node.perp.p1,
          p3: P(e)
        });
        return layers.tool.drawDot(this.node.perp.p1);
      },
      2: function(e) {
        layers.tool.clear();
        return layers.tool.drawArc(new Arc2(this.p0, P(e), this.p1));
      },
      3: function(e) {
        var currentTool;

        layers.tool.clear();
        layers.tool.drawBeizer({
          p0: this.p0,
          p1: P(e),
          p2: this.p2,
          p3: this.p1
        });
        return currentTool = new BezierTool();
      }
    };

    return BezierTool;

  })();

  Layer = (function() {
    function Layer(id) {
      var height, width;

      this.w = width = $('body').width();
      this.h = height = $('body').height();
      $('body').append($('<canvas id="' + id + '" width=' + width + ' height=' + height + '	style="border:1px solid #aaa; background-color:rgba(0,0,0,0); 	position: absolute; left: 0; top: 0; z-index: 0;"></canvas>'));
      this.ctx = document.getElementById(id).getContext('2d');
      this.clear();
    }

    Layer.prototype.clear = function() {
      return this.ctx.clearRect(0, 0, this.w, this.h);
    };

    Layer.prototype.drawLine = function(line) {
      this.ctx.beginPath();
      this.ctx.moveTo(line.p0.x, line.p0.y);
      this.ctx.lineTo(line.p1.x, line.p1.y);
      return this.ctx.stroke();
    };

    Layer.prototype.drawArc = function(arc) {
      var line, lines, _i, _len, _results;

      lines = arc.segmentize(30);
      _results = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        _results.push(this.drawLine(line));
      }
      return _results;
    };

    Layer.prototype.drawBeizer = function(beizer) {
      this.ctx.beginPath();
      this.ctx.moveTo(beizer.p0.x, beizer.p0.y);
      this.ctx.bezierCurveTo(beizer.p1.x, beizer.p1.y, beizer.p2.x, beizer.p2.y, beizer.p3.x, beizer.p3.y);
      this.ctx.stroke();
      this.drawNode(beizer.p1);
      return this.drawNode(beizer.p2);
    };

    Layer.prototype.drawDot = function(point) {
      this.ctx.fillStyle = "#FFCC33";
      this.ctx.fillRect(point.x + 1, point.y + 1, 3, 3);
      return this.ctx.fillStyle = "black";
    };

    Layer.prototype.drawNode = function(rect, highLight) {
      if (highLight == null) {
        highLight = false;
      }
      this.ctx.fillStyle = "blue";
      if (highLight) {
        this.ctx.fillRect(rect.x - 2, rect.y - 2, rect.w + 4, rect.h + 4);
      } else {
        this.ctx.fillRect(rect.x, rect.y, rect.w, rect.h);
      }
      this.ctx.fillStyle = "red";
      this.ctx.fillRect(rect.x + 2, rect.y + 2, rect.w - 4, rect.h - 4);
      return this.ctx.fillStyle = "black";
    };

    Layer.prototype.drawRoad = function(pos, ang) {
      if (ang == null) {
        ang = 0;
      }
      this.ctx.rotate(ang);
      this.ctx.fillStyle = "gray";
      this.ctx.fillRect(pos.x - 4, pos.y - 16, 8, 32);
      this.ctx.fillStyle = "black";
      return this.ctx.rotate(0);
    };

    return Layer;

  })();

  root.nodes = [];

  Node = (function() {
    function Node(p0, p1, p2) {
      var x, y;

      this.p0 = p0;
      this.p1 = p1;
      this.p2 = p2;
      console.log("Herp");
      this.line = L(this.p0, this.p1);
      this.perp = this.line.perp();
      this.x = x = Math.floor(this.perp.p0.x);
      this.y = y = Math.floor(this.perp.p0.y);
      layers.main.drawLine(this.line);
      layers.main.drawLine(this.perp.grow(Math.max(this.perp.distance(this.p2), this.line.length())));
      layers.main.drawNode({
        x: this.perp.p0.x - 3,
        y: this.perp.p0.y - 3,
        w: 6,
        h: 6
      });
      if (nodes[x] == null) {
        root.nodes[x] = [];
      }
      root.nodes[x][y] = this;
    }

    Node.prototype.highLight = function() {
      return layers.tool.drawNode({
        x: this.perp.p0.x - 3,
        y: this.perp.p0.y - 3,
        w: 6,
        h: 6
      }, true);
    };

    return Node;

  })();

  Bezier = (function() {
    function Bezier(start, end, controlpoints) {
      this.start = start;
      this.end = end;
      this.controlpoints = controlpoints != null ? controlpoints : [];
      this.cordinateArray = _.flatten([this.start, this.controllpoints, this.end]);
    }

    return Bezier;

  })();

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
