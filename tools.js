// Generated by CoffeeScript 1.6.2
(function() {
  var CommonTool, RoadTool, SharpTurnTool, StraightRoadTool, Tool, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = this;

  Tool = (function() {
    function Tool() {
      console.log("setting tool", this);
      tools.current = this;
    }

    return Tool;

  })();

  CommonTool = (function(_super) {
    __extends(CommonTool, _super);

    function CommonTool() {
      CommonTool.__super__.constructor.call(this);
      layers.tool.clear();
    }

    CommonTool.prototype.over = function(ent) {
      if (ent instanceof ents.Node) {
        return new RoadTool(ent);
      }
    };

    return CommonTool;

  })(Tool);

  RoadTool = (function(_super) {
    __extends(RoadTool, _super);

    function RoadTool(node) {
      this.node = node != null ? node : null;
      this.click = __bind(this.click, this);
      RoadTool.__super__.constructor.call(this);
    }

    RoadTool.prototype.click = function(e) {
      if (this.curve != null) {
        layers.main.drawBeizer(this.curve);
        this.endNode = new ents.Node(this.curve.p3, this.curve.p2);
        return tools.current = new RoadTool(this.endNode);
      }
    };

    RoadTool.prototype.over = function(ent) {
      if (ent instanceof ents.Node) {
        layers.tool.clear();
        layers.tool.drawNode(this.node, true);
        layers.tool.drawBeizer(this.bezier(ent.pos));
        return this.endNode = ent;
      }
    };

    RoadTool.prototype.out = function(ent) {
      if (ent instanceof ents.Node) {
        return this.endNode = null;
      }
    };

    RoadTool.prototype.move = function(e) {
      var angle, color, curve, hue, k, len, rad, v, _ref;

      if (this.endNode == null) {
        layers.tool.clear();
        layers.tool.drawNode(this.node, true);
        curve = C.fromNode(this.node, P(e));
        angle = Math.abs(L(curve.p0, curve.p1).signedAngle(L(curve.p2, curve.p3)));
        len = curveLen(curve);
        rad = (len * ((2 * Math.PI) / angle)) / (2 * Math.PI);
        color = "#333";
        if (angle > Math.PI / 2) {
          new SharpTurnTool(this.node);
        } else if (rad < 15 || L(curve.p1, curve.p2).length() > L(curve.p0, curve.p3).length()) {
          color = "#333";
        } else {
          hue = 0;
          _ref = root.colorSpeed;
          for (k in _ref) {
            v = _ref[k];
            if (rad > new Number(k)) {
              hue = Math.max(v, hue);
            }
          }
          color = "hsb(" + hue + ", 0.9, 0.5)";
          this.curve = curve;
        }
        console.log(angle, len, rad, color);
        if (this.curve != null) {
          return layers.tool.drawBeizer(this.curve, color);
        }
      }
    };

    RoadTool.prototype.keyDown = function(e) {
      if (e.which === 17) {
        return tools.current = new StraightRoadTool(this.node);
      }
    };

    return RoadTool;

  })(Tool);

  root.colorSpeed = {
    15: 0,
    30: 0.05,
    55: 0.10,
    90: 0.15,
    135: 0.20,
    195: 0.25,
    250: 0.30,
    335: 0.35,
    435: 0.40,
    560: 0.45,
    755: 0.50
  };

  SharpTurnTool = (function(_super) {
    __extends(SharpTurnTool, _super);

    function SharpTurnTool(node) {
      this.node = node;
      SharpTurnTool.__super__.constructor.call(this);
    }

    SharpTurnTool.prototype.click = function(e) {
      if (this.line != null) {
        layers.main.drawStraightRoad(this.line);
        return new RoadTool(new ents.Node(this.line.p1, this.line.p0));
      }
    };

    SharpTurnTool.prototype.move = function(e) {
      var angle, curve;

      curve = C.fromNode(this.node, P(e));
      angle = Math.abs(L(curve.p0, curve.p1).signedAngle(L(curve.p2, curve.p3)));
      console.log("angle", angle);
      if (angle <= Math.PI / 2) {
        if (!(L(curve.p1, curve.p2).length() > L(curve.p0, curve.p3).length())) {
          new RoadTool(this.node);
        }
      }
      this.line = L(this.node.pos, P(e));
      layers.tool.clear();
      return layers.tool.drawStraightRoad(this.line);
    };

    return SharpTurnTool;

  })(Tool);

  StraightRoadTool = (function(_super) {
    __extends(StraightRoadTool, _super);

    function StraightRoadTool(node) {
      this.node = node != null ? node : null;
      StraightRoadTool.__super__.constructor.call(this);
    }

    StraightRoadTool.prototype.click = function(e) {
      var line, node;

      line = this.straightLineFromNode(this.node, P(e));
      layers.main.drawLine(line);
      node = new ents.Node(line.p1, line.p0);
      return tools.current = new RoadTool(node);
    };

    StraightRoadTool.prototype.move = function(e) {
      var line;

      layers.tool.clear();
      line = this.straightLineFromNode(this.node, P(e));
      return layers.tool.drawLine(line);
    };

    StraightRoadTool.prototype.straightLineFromNode = function(node, pos) {
      var line, loc;

      line = L(node.pos, node.ctrl).growAdd(1000);
      loc = jsBezier.nearestPointOnCurve(pos, this.lineToBez(line)).location;
      return L(node.pos, node.ctrl).growAdd(1000 * loc);
    };

    StraightRoadTool.prototype.lineToBez = function(l) {
      return [
        {
          x: l.p0.x,
          y: l.p0.y
        }, {
          x: l.p0.x,
          y: l.p0.y
        }, {
          x: l.p1.x,
          y: l.p1.y
        }, {
          x: l.p1.x,
          y: l.p1.y
        }
      ];
    };

    StraightRoadTool.prototype.keyUp = function(e) {
      if (e.which === 17) {
        return tools.current = new RoadTool(this.node);
      }
    };

    return StraightRoadTool;

  })(Tool);

  root.tools = {};

  root.tools.RoadTool = RoadTool;

  root.tools.CommonTool = CommonTool;

}).call(this);
